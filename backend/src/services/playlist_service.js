import db from '../models/index.js';
const getAllPlaylistsByUserId = async (userId, currentUserId) => {
  try {
    const isOwner = Number(userId) === Number(currentUserId); // üëà So s√°nh ng∆∞·ªùi d√πng

    const playlists = await db.Playlist.findAll({
      where: {
        userId: userId,
        ...(isOwner ? {} : { privacy: 'public' }) // üëà N·∫øu kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu, ch·ªâ th·∫•y public
      },
      include: [
         {
            model: db.User, // ‚úÖ L·∫•y ng∆∞·ªùi t·∫°o playlist
            attributes: ['id', 'Name'] 
          },
        {
          model: db.Track,
          attributes: ['id', 'trackUrl', 'imageUrl', 'trackname', 'duration_ms'],
          include: [
            {
              model: db.User,
              attributes: ['id', 'userName', 'Name']
            },
          ],
        }
      ]
    });

    return playlists;
  } catch (error) {
    console.error('Error fetching playlists:', error);
    throw error;
  }
};
const getAllPublicPlaylists = async () => {
  return await db.Playlist.findAll({
    where: { privacy: 'public' },
    include: [
      {
        model: db.User,
        attributes: ['id', 'Name']
      },
      {
        model: db.Track,
        attributes: ['id', 'trackUrl', 'imageUrl', 'trackname', 'duration_ms'],
        include: [
          {
            model: db.User,
            attributes: ['id', 'userName', 'Name']
          },
        ]
      }
    ]
  });
};



const createPlaylist = async (userId, trackId) => {
    let title, createDate, imageUrl, privacy;
    const playlistCount = await db.Playlist.count({
        where: { userId: userId }
    });

    if (!trackId) {
        title = "Danh s√°ch ph√°t c·ªßa t√¥i #" + (playlistCount + 1);
        createDate = new Date();
        imageUrl = "";
    } else {
        try {
            const track = await db.Track.findByPk(trackId);
            if (!track) {
                throw new Error('Kh√¥ng t√¨m th·∫•y b√†i h√°t');
            }

            title = `Playlist t·ª´ b√†i h√°t #${track.id}`;
            createDate = new Date();
            imageUrl = track.imageUrl || "";
        } catch (error) {
            console.error('Error creating playlist:', error.message);
            throw error;
        }
    }

    const newPlaylist = await db.Playlist.create({ userId, title, createDate, imageUrl, privacy });

    if (trackId) {
        console.log(">>playlistId: ", newPlaylist.id);
        console.log(">>trackId: ", trackId);
        await db.PlaylistTrack.create({
            playlistId: newPlaylist.id,
            trackId: trackId
        });
    }

    return newPlaylist;
};

// const updatePlaylist = async (id, title, imageUrl) => {
//     const playlist = await db.Playlist.findByPk(id);
//     await playlist.update({ title, imageUrl });
//     return playlist;
// };


/**
 * C·∫≠p nh·∫≠t th√¥ng tin (title, imageUrl) c·ªßa m·ªôt playlist, sau khi ki·ªÉm tra quy·ªÅn s·ªü h·ªØu.
 * @param {number} playlistId ID c·ªßa playlist c·∫ßn c·∫≠p nh·∫≠t.
 * @param {number} userId ID c·ªßa ng∆∞·ªùi d√πng y√™u c·∫ßu c·∫≠p nh·∫≠t (ƒë·ªÉ ki·ªÉm tra quy·ªÅn). // <-- Th√™m l·∫°i userId
 * @param {string} title Ti√™u ƒë·ªÅ m·ªõi cho playlist.
 * @param {string | null} imageUrl URL ·∫£nh m·ªõi cho playlist (c√≥ th·ªÉ l√† null).
 * @returns {Promise<object>} Object playlist ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
 * @throws {Error} N√©m l·ªói v·ªõi statusCode (404, 403, 400, 500) n·∫øu c√≥ l·ªói.
 */
const updatePlaylist = async (playlistId, userId, title, imageUrl, privacy) => {
    const numericPlaylistId = Number(playlistId);

    // Validate playlistId v√† userId
    if (isNaN(numericPlaylistId) || !userId) {
        const error = new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (playlistId ho·∫∑c userId).");
        error.statusCode = 400;
        throw error;
    }

    // Validate title
    if (typeof title !== 'string' || title.trim() === '') {
        const error = new Error("Ti√™u ƒë·ªÅ playlist kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        error.statusCode = 400;
        throw error;
    }

    // Validate imageUrl (n·∫øu kh√¥ng undefined)
    if (imageUrl !== undefined && imageUrl !== null && typeof imageUrl !== 'string') {
        const error = new Error("ƒê·ªãnh d·∫°ng imageUrl kh√¥ng h·ª£p l·ªá.");
        error.statusCode = 400;
        throw error;
    }

    // Validate privacy
    if (privacy !== undefined && privacy !== 'public' && privacy !== 'private') {
        const error = new Error("Gi√° tr·ªã privacy kh√¥ng h·ª£p l·ªá.");
        error.statusCode = 400;
        throw error;
    }

    try {
        console.log(`[Service] Finding playlist ${numericPlaylistId} for update by user ${userId}`);
        const playlistToUpdate = await db.Playlist.findOne({
            where: {
                id: numericPlaylistId,
                userId: userId
            }
        });

        if (!playlistToUpdate) {
            const exists = await db.Playlist.findByPk(numericPlaylistId);
            if (exists) {
                const error = new Error('Permission denied');
                error.statusCode = 403;
                throw error;
            } else {
                const error = new Error('Playlist not found');
                error.statusCode = 404;
                throw error;
            }
        }

        // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
        const updateData = {
            title: title.trim()
        };

        // Ch·ªâ c·∫≠p nh·∫≠t imageUrl n·∫øu truy·ªÅn r√µ (undefined = kh√¥ng c·∫≠p nh·∫≠t, null = x√≥a ·∫£nh)
        if (imageUrl !== undefined) {
            updateData.imageUrl = imageUrl; 
        }

        // C·∫≠p nh·∫≠t privacy n·∫øu c√≥
        if (privacy !== undefined) {
            updateData.privacy = privacy;
        }

        console.log(`[Service] Updating playlist ${numericPlaylistId} with data:`, updateData);

        // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
        await playlistToUpdate.update(updateData);

        console.log(`[Service] Playlist ${numericPlaylistId} updated successfully by user ${userId}.`);
        return playlistToUpdate;

    } catch (error) {
        console.error(`[Service] Error updating playlist ${playlistId} by user ${userId}:`, error);
        if (!error.statusCode) {
            error.statusCode = 500;
        }
        throw error;
    }
};



const deletePlaylist = async (playlistId, userId) => {
    // Validate input (ƒë·∫£m b·∫£o ID l√† s·ªë h·ª£p l·ªá)
    const numericPlaylistId = Number(playlistId);
    if (isNaN(numericPlaylistId) || !userId) {
        const error = new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (playlistId ho·∫∑c userId).");
        error.statusCode = 400;
        throw error;
    }

    // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o c·∫£ hai thao t√°c x√≥a ƒë·ªÅu th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i c√πng nhau
    const t = await db.sequelize.transaction(); // <-- B·∫Øt ƒë·∫ßu transaction

    try {
        // --- B∆Ø·ªöC 1: Ki·ªÉm tra s·ª± t·ªìn t·∫°i v√† quy·ªÅn s·ªü h·ªØu c·ªßa Playlist ---
        console.log(`[Service] Checking ownership for playlist ${numericPlaylistId}, user ${userId}`);
        const playlistToDelete = await db.Playlist.findOne({
            where: {
                id: numericPlaylistId, // Gi·∫£ s·ª≠ c·ªôt ID trong Playlist l√† 'id'
                // --- S·ª¨A T√äN C·ªòT ·ªû ƒê√ÇY ---
                // S·ª≠ d·ª•ng t√™n c·ªôt 'userId' (vi·∫øt hoa I) nh∆∞ trong schema DB
                userId: userId
                // -------------------------
            },
            transaction: t // Th·ª±c hi·ªán trong transaction
        });

        // N·∫øu kh√¥ng t√¨m th·∫•y playlist ho·∫∑c kh√¥ng ƒë√∫ng ch·ªß s·ªü h·ªØu
        if (!playlistToDelete) {
            // Ki·ªÉm tra xem playlist c√≥ t·ªìn t·∫°i nh∆∞ng kh√¥ng thu·ªôc user n√†y kh√¥ng
            const exists = await db.Playlist.findByPk(numericPlaylistId, { transaction: t });
            if (exists) {
                console.warn(`[Service] Permission denied for user ${userId} on playlist ${numericPlaylistId}`);
                const error = new Error('Permission denied'); // Kh√¥ng c√≥ quy·ªÅn
                error.statusCode = 403;
                throw error; // L·ªói s·∫Ω ƒë∆∞·ª£c b·∫Øt v√† rollback ·ªü catch
            } else {
                console.warn(`[Service] Playlist ${numericPlaylistId} not found`);
                const error = new Error('Playlist not found'); // Kh√¥ng t√¨m th·∫•y
                error.statusCode = 404;
                throw error; // L·ªói s·∫Ω ƒë∆∞·ª£c b·∫Øt v√† rollback ·ªü catch
            }
        }

        // --- B∆Ø·ªöC 2: X√≥a c√°c li√™n k·∫øt trong PlaylistTrack TR∆Ø·ªöC ---
        console.log(`[Service] Deleting PlaylistTrack entries for playlist ${numericPlaylistId}`);
        await db.PlaylistTrack.destroy({
            where: {
                // --- S·ª¨A T√äN C·ªòT ·ªû ƒê√ÇY ---
                // S·ª≠ d·ª•ng t√™n c·ªôt 'playlistId' (vi·∫øt hoa I) nh∆∞ trong schema DB
                playlistId: numericPlaylistId
                // -------------------------
            },
            transaction: t // Th·ª±c hi·ªán trong transaction
        });

        // --- B∆Ø·ªöC 3: X√≥a b·∫£n ghi Playlist ---
        console.log(`[Service] Deleting Playlist ${numericPlaylistId}`);
        // Kh√¥ng c·∫ßn `where` n·ªØa v√¨ ƒë√£ t√¨m th·∫•y v√† ki·ªÉm tra quy·ªÅn ·ªü B∆∞·ªõc 1
        // Ch·ªâ c·∫ßn destroy ƒë·ªëi t∆∞·ª£ng ƒë√£ t√¨m th·∫•y
        await playlistToDelete.destroy({ transaction: t });

        // --- B∆Ø·ªöC 4: Commit Transaction ---
        await t.commit(); // Ho√†n t·∫•t transaction n·∫øu m·ªçi th·ª© th√†nh c√¥ng
        console.log(`[Service] Playlist ${numericPlaylistId} deleted successfully.`);

    } catch (error) {
        // N·∫øu c√≥ l·ªói, rollback transaction
        console.error(`[Service] Error deleting playlist ${numericPlaylistId}:`, error);
        // ƒê·∫£m b·∫£o rollback ch·ªâ ƒë∆∞·ª£c g·ªçi m·ªôt l·∫ßn v√† khi transaction c√≤n ho·∫°t ƒë·ªông
        if (t && !t.finished) { // Ki·ªÉm tra xem transaction ƒë√£ k·∫øt th√∫c ch∆∞a
             await t.rollback();
             console.log(`[Service] Transaction rolled back for playlist ${numericPlaylistId}.`);
        }


        // N√©m l·∫°i l·ªói ƒë·ªÉ controller x·ª≠ l√Ω (gi·ªØ nguy√™n statusCode n·∫øu c√≥)
        if (!error.statusCode) {
            // Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói t·ª´ DB kh√¥ng
             if (error.name === 'SequelizeDatabaseError') {
                 // C√≥ th·ªÉ ƒë√¢y l√† l·ªói "Invalid column name" ho·∫∑c l·ªói DB kh√°c
                 console.error("[Service] Database Error:", error.original?.message || error.message);
                 // Kh√¥ng ghi ƒë√® statusCode n·∫øu ƒë√£ c√≥
                 if(!error.statusCode) error.statusCode = 500;
             } else {
                 error.statusCode = 500; // L·ªói server m·∫∑c ƒë·ªãnh cho c√°c l·ªói kh√°c
             }
        }
        throw error;
    }
};


export {
    getAllPlaylistsByUserId,
    getAllPublicPlaylists,
    createPlaylist,
    updatePlaylist,
    // getPlaylistById,
    deletePlaylist
};

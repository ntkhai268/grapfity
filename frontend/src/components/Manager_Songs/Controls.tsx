import React, { useState, useEffect, useCallback, RefObject } from "react";

// Import API v√† ki·ªÉu d·ªØ li·ªáu Playlist t·ª´ service c·ªßa b·∫°n
import { createPlaylistAPI, getMyPlaylistsAPI } from "../../services/playlistService";
import { addTrackToPlaylistAPI } from "../../services/trackPlaylistService";
import {downloadTrackByIdAPI } from"../../services/trackServiceAPI";
import type { PlaylistData } from "../Manager_Playlists/ManagerDataPlaylist";
import {  isTrackLikedByUserAPI,  likeTrackAPI,  unlikeTrackAPI,  countLikesForTrackAPI,} from "../../services/likeService";
import GlobalAudioManager from "../../hooks/GlobalAudioManager";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho props m√† Controls s·∫Ω nh·∫≠n t·ª´ ManagerSongSection
interface ControlsProps {
  audioRef: RefObject<HTMLAudioElement | null>;
  songUrl: string | undefined;
  isPlaying: boolean;
  
  currentTrackId?: string | number | null;
  trackId?: string | number | null;
  // playlistIndex: number;
  // Th√™m c√°c props kh√°c n·∫øu ManagerSongSection truy·ªÅn xu·ªëng (v√≠ d·ª•: playNext, playPrevious, etc.)
}

// --- Component Controls ---
// Controls gi·ªù ƒë√¢y nh·∫≠n props t·ª´ ManagerSongSection
const Controls: React.FC<ControlsProps> = ({
  audioRef,
  songUrl,
  isPlaying,
  currentTrackId,
  trackId,
  // playlistIndex,
  // ...destructure c√°c props kh√°c n·∫øu c√≥
}) => {
  // --- Hooks & State ---
  // console.log('[DEBUG] Controls props:', {trackId, songUrl, currentTrackId, isPlaying});

  // Gi·∫£ ƒë·ªãnh c√≥ c√°ch l·∫•y tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
  const isLoggedIn = true; // <<< !!! THAY TH·∫æ B·∫∞NG LOGIC L·∫§Y TR·∫†NG TH√ÅI ƒêƒÇNG NH·∫¨P TH·ª∞C T·∫æ !!!



  const [isDropdownOpen, setDropdownOpen] = useState<boolean>(false);
  const [userPlaylists, setUserPlaylists] = useState<PlaylistData[]>([]);
  const [isLoadingPlaylists, setIsLoadingPlaylists] = useState<boolean>(false);
  const [playlistError, setPlaylistError] = useState<string | null>(null);
  const [isAddingTrack, setIsAddingTrack] = useState<boolean>(false);

  const [isLiked, setIsLiked] = useState<boolean>(false);
  const [likeCount, setLikeCount] = useState<number>(0);
  // --- Handlers (Memoized with useCallback) ---

  const handleToggleLike = async () => {
    if (!trackId || !isLoggedIn) return;

    try {
      if (isLiked) {
        await unlikeTrackAPI(trackId);
        setIsLiked(false);
        setLikeCount((prev) => Math.max(0, prev - 1));
      } else {
        await likeTrackAPI(trackId);
        setIsLiked(true);
        setLikeCount((prev) => prev + 1);
      }
    } catch (error) {
      console.error("L·ªói khi toggle like:", error);
      alert("C√≥ l·ªói x·∫£y ra khi like/unlike b√†i h√°t.");
    }
  };

  const toggleDropdown = useCallback(() => {
    setDropdownOpen(prev => !prev);
  }, []);

  const closeDropdown = useCallback(() => {
    setDropdownOpen(false);
  }, []);

  const fetchPlaylists = useCallback(async () => {
    if (!isLoggedIn) {
      setUserPlaylists([]);
      return;
    }
    setIsLoadingPlaylists(true);
    setPlaylistError(null);
    try {
      const playlists = await getMyPlaylistsAPI();
      setUserPlaylists(playlists);
    } catch (error: any) {
      console.error("Failed to fetch user playlists:", error);
      setPlaylistError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch playlist.");
    } finally {
      setIsLoadingPlaylists(false);
    }
  }, [isLoggedIn]);



  const handleAddToExistingPlaylist = useCallback(async (playlistId: string | number) => {
    if (isAddingTrack || !currentTrackId) {
      if(!currentTrackId) console.error("Cannot add: Current Track ID missing (from props).");
      return;
    }
    console.log(`Action: Add track ${currentTrackId} to playlist ${playlistId}`);
    setIsAddingTrack(true);
    try {
      const result = await addTrackToPlaylistAPI(playlistId, currentTrackId);
      if (result.success) {
        alert(result.message || "ƒê√£ th√™m b√†i h√°t v√†o playlist!");
      } else {
        alert(result.message || "Th√™m b√†i h√°t th·∫•t b·∫°i.");
      }
    } catch (error) {
      console.error("Unexpected error calling addTrackToPlaylistAPI:", error);
      alert("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën.");
    } finally {
      setIsAddingTrack(false);
      closeDropdown();
    }
  }, [currentTrackId, closeDropdown, isAddingTrack]); // currentTrackId gi·ªù l√† prop


// const handlePlayButtonClick = () => {
//   const currentSong = GlobalAudioManager.getCurrentSong();
//   const currentIsPlaying = GlobalAudioManager.getIsPlaying();
//   const audio = GlobalAudioManager.getAudioElement();

//   if (!trackId || !songUrl) {
//     console.error("Missing trackId or songUrl");
//     return;
//   }

//   const isCurrentSong = currentSong && currentSong.id === trackId;

//   if (!isCurrentSong) {
//     // üî• Ch·ªâ ph√°t b√†i ƒë·∫ßu ti√™n ƒë√£ ƒë∆∞·ª£c set t·ª´ ManagerSongSection
//     console.log("üìÄ B√†i kh√°c ƒëang ph√°t. Ph√°t b√†i ƒë√£ ƒë∆∞·ª£c setup trong ManagerSongSection.");
//     GlobalAudioManager.playSongAt(playlistIndex); // ch·ªâ ph√°t b√†i ƒë√£ ƒë∆∞·ª£c set
//   } else {
//     if (currentIsPlaying) {
//       GlobalAudioManager.pausePlayback();
//     } else if (audio && currentSong) {
//       GlobalAudioManager.playAudio(audio, currentSong);
//     }
//   }
// };



  // --- Effects ---
  
  const handlePlayButtonClick = () => {
  const currentSong = GlobalAudioManager.getCurrentSong();
  const isCurrentlyPlaying = GlobalAudioManager.getIsPlaying();
  const audio = GlobalAudioManager.getAudioElement();

  if (!trackId || !songUrl) {
    console.error("Missing trackId or songUrl");
    return;
  }

  const isCurrentSong = currentSong && currentSong.id === trackId;

  if (!isCurrentSong) {
    // ‚úÖ L√∫c n√†y m·ªõi load ƒë√∫ng playlist ƒë√£ ƒë∆∞·ª£c xem
    const playlist = JSON.parse(localStorage.getItem("viewedPlaylist") || "[]");
    const index = parseInt(localStorage.getItem("viewedIndex") || "0");

    const context = {
      id: `manager-${trackId}`,
      type: "queue"
    };

    GlobalAudioManager.setPlaylist(playlist, index, context);
    setTimeout(() => {
      GlobalAudioManager.playSongAt(index);
    }, 50);
  } else {
    if (isCurrentlyPlaying) {
      GlobalAudioManager.pausePlayback();
    } else if (audio && currentSong) {
      GlobalAudioManager.playAudio(audio, currentSong);
    }
  }
};


  useEffect(() => {
    fetchPlaylists();
  }, [fetchPlaylists]);

  const handleCreatePlaylist = async () => {
          console.log("B·∫Øt ƒë·∫ßu t·∫°o playlist m·ªõi...");
          // C√≥ th·ªÉ th√™m tr·∫°ng th√°i loading ·ªü ƒë√¢y n·∫øu mu·ªën (v√≠ d·ª•: disable n√∫t)
          // setIsLoading(true);
          try {
              // G·ªçi API t·∫°o playlist m·ªõi (KH√îNG c·∫ßn truy·ªÅn userId, ch·ªâ truy·ªÅn trackId n·∫øu c√≥)
              // V√¨ ƒë√¢y l√† t·∫°o playlist tr·ªëng, kh√¥ng c·∫ßn truy·ªÅn g√¨ c·∫£ (ho·∫∑c truy·ªÅn null/undefined)
              const newPlaylist = await createPlaylistAPI(); // <-- G·ªçi kh√¥ng c·∫ßn tham s·ªë
      
              if (newPlaylist && newPlaylist.id) {
                  console.log("Playlist m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o:", newPlaylist);
                  await fetchPlaylists(); 
                  // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang c·ªßa playlist m·ªõi t·∫°o th√†nh c√¥ng
         
              } else {
                  console.error("Kh√¥ng th·ªÉ t·∫°o playlist: API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.");
                  alert("ƒê√£ x·∫£y ra l·ªói khi t·∫°o playlist (ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá).");
              }
          } catch (error: any) { // B·∫Øt l·ªói c·ª• th·ªÉ h∆°n
              console.error("L·ªói khi t·∫°o playlist:", error);
              // Ki·ªÉm tra l·ªói Unauthorized
              if (error.message === 'Unauthorized') {
                   alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o playlist.");
                   // navigate('/login'); // Chuy·ªÉn h∆∞·ªõng n·∫øu c·∫ßn
              } else {
                   alert(`ƒê√£ x·∫£y ra l·ªói khi t·∫°o playlist: ${error.message || 'Vui l√≤ng th·ª≠ l·∫°i.'}`);
              }
          } finally {
              // T·∫Øt tr·∫°ng th√°i loading n·∫øu c√≥
              // setIsLoading(false);
          }
      };
  //T·∫£i tr·∫°ng th√°i like & s·ªë like khi trackId thay ƒë·ªïi
  useEffect(() => {
    const fetchLikeState = async () => {
      if (!trackId || !isLoggedIn) return;

      try {
        const liked = await isTrackLikedByUserAPI(trackId);
        const count = await countLikesForTrackAPI(trackId);
        setIsLiked(liked);
        setLikeCount(count);
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i like:", error);
      }
    };

    fetchLikeState();
  }, [trackId, isLoggedIn]);

  useEffect(() => {
  console.log('[DEBUG] Controls nh·∫≠n props m·ªõi:', { trackId, songUrl, currentTrackId, isPlaying });
}, [trackId, songUrl, currentTrackId, isPlaying]);
  
// console.log("Controls xxxxxxxxxx:", { trackId, currentTrackId, isPlaying,  }); 
  // --- Render ---
  return (
    <div className="controls">
      {/* Audio Player s·ª≠ d·ª•ng audioRef v√† songUrl t·ª´ props */}
      <audio ref={audioRef} src={songUrl} />

      {/* Play/Pause Button s·ª≠ d·ª•ng isPlaying v√† togglePlay t·ª´ props */}
      <div className="play-button" onClick={handlePlayButtonClick}>
       <i
        className={
          isPlaying && currentTrackId === trackId
            ? "fas fa-pause"
            : "fas fa-play"
        }
        style={{ color: "black" }}
      ></i>
      </div>

      {/* Other Icons */}
      <div className="control-icon" onClick={handleToggleLike} title={isLiked ? "B·ªè th√≠ch" : "Th√≠ch"}>
        <i
          className={isLiked ? "fas fa-heart" : "far fa-heart"} // fas = solid (ƒë·ªè), far = regular (vi·ªÅn)
          style={{ color: isLiked ? "red" : "white", cursor: "pointer" }}
        ></i>
        <span style={{ fontSize: "12px", marginLeft: "4px", color: "#ccc" }}>{likeCount}</span>
      </div>

     <div
        className="control-icon"
        title="T·∫£i b√†i h√°t v·ªÅ"
        onClick={() => trackId != null && downloadTrackByIdAPI(trackId)}
      >
        <i className="fas fa-arrow-down" style={{ color: "white", cursor: "pointer" }}></i>
      </div>

      {/* Ellipsis Icon & Main Dropdown Trigger */}
      <div className="control-icon" style={{ position: 'relative' }} onClick={toggleDropdown}>
        <i className="fas fa-ellipsis-h" style={{ color: "white" }}></i>
        <div className={`dropdown ${isDropdownOpen ? 'active' : ''}`}>
          <div className="dropdown-content">
           <a
              href="#"
              onClick={async (e) => {
                e.preventDefault(); // NgƒÉn chuy·ªÉn trang
                await handleToggleLike(); // G·ªçi h√†m ƒë√£ vi·∫øt s·∫µn
                closeDropdown(); // ƒê√≥ng dropdown sau khi nh·∫•n
              }}
              style={{ color: isLiked ? 'red' : 'white' }}
            >
              {isLiked ? 'Unlike' : 'Like'}
            </a>
            {isLoggedIn ? (
              <div className="dropdown-item has-submenu">
                <span>Add To Playlist</span>
                <i className="fas fa-chevron-right submenu-arrow"></i>
                <div className="submenu">
                  <div className="submenu-item search-item">
                    <i className="fas fa-search"></i>
                    <input type="text" placeholder="T√¨m m·ªôt danh s√°ch ph√°t" disabled={isLoadingPlaylists || !!playlistError}/>
                  </div>
                  <div className="submenu-item" onClick={handleCreatePlaylist}>
                    <i className="fas fa-plus"></i>
                    <span>Danh s√°ch ph√°t m·ªõi</span>
                  </div>
                  {isLoadingPlaylists && <div className="submenu-item">ƒêang t·∫£i...</div>}
                  {playlistError && <div className="submenu-item" style={{ color: 'red' }}>{playlistError}</div>}
                  {!isLoadingPlaylists && !playlistError && userPlaylists.length > 0 && (
                    userPlaylists.map((playlist) => (
                      <div
                        key={playlist.id}
                        className={`submenu-item existing-playlist ${isAddingTrack ? 'disabled' : ''}`}
                        onClick={() => !isAddingTrack && handleAddToExistingPlaylist(playlist.id)}
                      >
                        <span>{playlist.title}</span>
                      </div>
                    ))
                  )}
                  {!isLoadingPlaylists && !playlistError && userPlaylists.length === 0 && (
                      <div className="submenu-item" style={{ fontStyle: 'italic', color: '#aaa' }}>Kh√¥ng c√≥ playlist.</div>
                  )}
                </div>
              </div>
            ) : (
              <a href="#" style={{ color: '#888', cursor: 'not-allowed' }} onClick={(e) => {e.preventDefault(); }}>
                Add To Playlist
              </a>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Controls;
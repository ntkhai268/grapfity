import React, { useState, useEffect } from "react"; // Th√™m React n·∫øu ch∆∞a c√≥
import { useNavigate } from "react-router-dom";
import Sidebar from './Sidebar';
// Import GlobalAudioManager v√† c√°c ki·ªÉu d·ªØ li·ªáu c·∫ßn thi·∫øt
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c
import GlobalAudioManager, { Song, PlaylistContext } from "../hooks/GlobalAudioManager"; 

// Import service API v√† ki·ªÉu d·ªØ li·ªáu TrackData
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ch√≠nh x√°c
import { getAllTracksAPI, TrackData } from "../services/trackServiceAPI";
import { PlaylistData } from "../components/Manager_Playlists/ManagerDataPlaylist";
import { getAllPublicPlaylistsAPI } from "../services/playlistService"; 
import { getTop10PopularTracksAPI, getHomeRecommendationsAPI  } from "../services/listeningService";
import { encodeBase62WithPrefix  } from "../hooks/base62";
import { fetchListeningHistory, ListeningHistoryRecord } from "../services/listeningService"; // Import h√†m fetchListeningHistory n·∫øu c·∫ßn


import "../styles/Section.css"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n CSS ƒë√∫ng
const BACKEND_URL = 'http://localhost:8080';
// H√†m map t·∫°m th·ªùi t·ª´ TrackData sang Song (b·∫°n c√≥ th·ªÉ ƒë·∫∑t ·ªü n∆°i kh√°c)
function normalizeUrl(url: string | undefined | null): string | undefined {
  if (!url) return undefined;
  if (url.startsWith('http://') || url.startsWith('https://')) return url; // ƒë√£ chu·∫©n URL
  return `${BACKEND_URL}/${url.replace(/^\/+/, '')}`;
}

export const mapTrackDataToSong = (track: TrackData): Song => ({
  id: track.id,
  src: normalizeUrl(track.src) || '',   // chu·∫©n h√≥a URL n·∫øu c·∫ßn
  title: track.title === null ? undefined : track.title,
  artist: track.artist === null ? undefined : track.artist,
  cover: normalizeUrl(track.cover),
});
const Section: React.FC = () => { // Th√™m ki·ªÉu React.FC
    const navigate = useNavigate(); // Kh·ªüi t·∫°o useNavigate
    const [sidebarExpanded, setSidebarExpanded] = useState(false);

    // State l∆∞u tr·ªØ m·∫£ng Song[] (ƒë√£ s·ª≠a ki·ªÉu)
    const [allTracks, setAllTracks] = useState<Song[]>([]); 
    const [isLoading, setIsLoading] = useState<boolean>(true); 
    const [recomTracks, setRecomTracks] = useState<Song[]>([]);
    const [topTracks, setTopTracks] = useState<Song[]>([]);
    const [isLoadingTop, setIsLoadingTop] = useState<boolean>(true);  
    const [error, setError] = useState<string | null>(null);    
    const [currentPlayingId, setCurrentPlayingId] = useState<string | number | null>(null);
    const [isPlaying, setIsPlaying] = useState<boolean>(false);
    const [publicPlaylists, setPublicPlaylists] = useState<PlaylistData[]>([]);

    // Fetch d·ªØ li·ªáu khi component mount
    useEffect(() => {
        const fetchTracks = async () => {
            setIsLoading(true);
            setError(null);
            try {
                // fetchedTracks c√≥ ki·ªÉu TrackData[]
                const fetchedRecords: ListeningHistoryRecord[] = await fetchListeningHistory();

                const fetchedTracks: TrackData[] = fetchedRecords.map(record => {
                const track = record.track;
                const metadata = record.metadata;

                return {
                    id: track.id,
                    title: metadata?.trackname || 'Unknown',
                    artist: track.User?.UploaderName || 'Unknown',
                    src: track.trackUrl,
                    cover: track.imageUrl,
                    // N·∫øu TrackData c√≥ th√™m c√°c tr∆∞·ªùng kh√°c nh∆∞ privacy, createdAt, ... th√¨ th√™m v√†o
                    // privacy: track.privacy,
                    // createdAt: track.createdAt,
                };
                });
                
                // √Ånh x·∫° t·ª´ TrackData[] sang Song[]
                const songs: Song[] = fetchedTracks.map(mapTrackDataToSong);

                // C·∫≠p nh·∫≠t state v·ªõi m·∫£ng Song[]
                setAllTracks(songs); 

            } catch (err: any) {
                console.error("Failed to fetch tracks:", err);
                setError(err.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h√°t.");
            } finally {
                setIsLoading(false);
            }
        };

        fetchTracks();
    }, []); // M·∫£ng r·ªóng ƒë·∫£m b·∫£o ch·ªâ ch·∫°y 1 l·∫ßn

    useEffect(() => {
        setIsLoadingTop(true);
        const fetchRecomTracks = async () => {
            try {
                const recomTracksRaw: TrackData[] = await getHomeRecommendationsAPI();
                 console.log("check d·ªØ li·ªáu th√¥", recomTracksRaw); // check d·ªØ li·ªáu th√¥
                const topSongs: Song[] = recomTracksRaw.map(mapTrackDataToSong);
                 console.log("Mapped top songs:", topSongs);
                setRecomTracks(topSongs);
            } catch (err) {
                console.error("Failed to fetch top 10 tracks:", err);
            } finally {
                setIsLoadingTop(false);
            }
        };
        fetchRecomTracks();
    }, []);

    useEffect(() => {
        setIsLoadingTop(true);
        const fetchTopTracks = async () => {
            try {
                const topTracksRaw: TrackData[] = await getTop10PopularTracksAPI();
                 console.log("check d·ªØ li·ªáu th√¥", topTracksRaw); // check d·ªØ li·ªáu th√¥
                const topSongs: Song[] = topTracksRaw.map(mapTrackDataToSong);
                 console.log("Mapped top songs:", topSongs);
                setTopTracks(topSongs);
            } catch (err) {
                console.error("Failed to fetch top 10 tracks:", err);
            } finally {
                setIsLoadingTop(false);
            }
        };
        fetchTopTracks();
    }, []);


    // --- Chia nh·ªè d·ªØ li·ªáu (s·ª≠ d·ª•ng m·∫£ng Song[] ƒë√£ map) ---
    // Ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c m·∫£ng n√†y gi·ªù ƒë√£ ƒë√∫ng l√† Song[]
    const recommendedTracks: Song[] = recomTracks
    const top10Tracks: Song[] = topTracks; // S·ª≠ d·ª•ng m·∫£ng topTracks ƒë√£ map
    console.log("recommendedTracks:", recommendedTracks);
 
    const publicTracks: Song[] = allTracks; 
    const currentContext = GlobalAudioManager.getCurrentContext();

    const handleSidebarExpandChange = (expanded: boolean) => {
        setSidebarExpanded(expanded);
    };

    useEffect(() => {
    const unsubscribe = GlobalAudioManager.subscribe(() => {
        const song = GlobalAudioManager.getCurrentSong();
        setCurrentPlayingId(song?.id || null);
        setIsPlaying(GlobalAudioManager.getIsPlaying());
    });

    return () => unsubscribe();
    }, []);

    // H√†m x·ª≠ l√Ω click, nh·∫≠n danh s√°ch Song[] v√† index
    // Th√™m tham s·ªë 'type' v√† 'contextId' ƒë·ªÉ x√°c ƒë·ªãnh ng·ªØ c·∫£nh playlist
    // const handleClick = (list: Song[], index: number, type: PlaylistContext['type'], contextId: string | number = type) => {
    //     if (!list || list.length === 0 || index < 0 || index >= list.length) {
    //         console.error("Invalid list or index for handleClick");
    //         return;
    //     }
    //     const song = list[index];
        
    //     // T·∫°o ƒë·ªëi t∆∞·ª£ng context
    //     const playlistContext: PlaylistContext = {
    //         id: contextId, // D√πng type l√†m ID t·∫°m th·ªùi ho·∫∑c m·ªôt ID c·ª• th·ªÉ h∆°n n·∫øu c√≥
    //         type: type 
    //     };

    //     // --- S·ª¨A L·ªñI G·ªåI setPlaylist ---
    //     // G·ªçi setPlaylist v·ªõi ƒë·ªß 3 tham s·ªë b·∫Øt bu·ªôc: list, index, context
    //     GlobalAudioManager.setPlaylist(list, index, playlistContext); 
        
    //     // G·ªçi playSongAt ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√°t b√†i h√°t ƒë√£ ch·ªçn
    //     // (setPlaylist kh√¥ng t·ª± ƒë·ªông ph√°t)
    //     GlobalAudioManager.playSongAt(index);

    //     // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ManagerSong (n·∫øu b·∫°n v·∫´n mu·ªën gi·ªØ l·∫°i)
    //     navigate("/ManagerSong", {
    //         state: {
    //             // G·ª≠i state n·∫øu trang ManagerSong c·∫ßn th√¥ng tin n√†y ngay l·∫≠p t·ª©c
    //             songs: list, 
    //             currentIndex: index,
    //             currentSong: song,
    //         },
    //     });
    //     // ---------------------------------------

    // };


 const handleClicktest = (
    song: Song,
    list: Song[],
    index: number,
    type: PlaylistContext['type'],
    contextId: string | number = type
) => {
    // üëâ 1. L∆∞u v√†o localStorage ƒë·ªÉ ch·ªëng m·∫•t khi reload
    localStorage.setItem("viewedSong", JSON.stringify(song));
    localStorage.setItem("viewedPlaylist", JSON.stringify(list));
    localStorage.setItem("viewedIndex", index.toString());

    // M√£ h√≥a ID 
    const encodedId = encodeBase62WithPrefix(Number(song.id), 22); // ho·∫∑c 16-22 t√πy ƒë·ªô d√†i b·∫°n mu·ªën

    //  ƒêi·ªÅu h∆∞·ªõng sang trang ManagerSong, truy·ªÅn k√®m state
    navigate(`/ManagerSong/${encodedId}`, {
        state: {
            songs: list,
            currentIndex: index,
            currentSong: song,
            context: { id: contextId, type },
        },
    });
};



    const handlePlayButtonClick = (
        list: Song[],
        index: number,
        type: PlaylistContext['type'],
        contextId: string | number = type
        ) => {
        const clickedSong = list[index];
        const currentSong = GlobalAudioManager.getCurrentSong();
        const isCurrentlyPlaying = GlobalAudioManager.getIsPlaying();
        

        const context: PlaylistContext = {
            id: contextId,
            type: type
        };
         const sameSong = currentSong?.id === clickedSong.id;
        const sameContext =
            currentContext?.id === context.id &&
            currentContext?.type === context.type;

        // N·∫øu ch∆∞a c√≥ b√†i h√°t n√†o, ho·∫∑c b√†i kh√°c ƒëang ph√°t ‚Üí chuy·ªÉn playlist v√† ph√°t
        if (!sameSong || !sameContext) {
            GlobalAudioManager.setPlaylist(list, index, context);
            GlobalAudioManager.playSongAt(index);
            return;
        }

        // N·∫øu l√† b√†i hi·ªán t·∫°i ‚Üí toggle play/pause
        if (isCurrentlyPlaying) {
            GlobalAudioManager.pausePlayback();
        } else {
            GlobalAudioManager.playAudio(GlobalAudioManager.getAudioElement()!, clickedSong, context);
        }
    };
    // /fetch l·∫•y d·ªØ li·ªáu playlist public c·ªßa m·ªçi ng∆∞·ªùi
    useEffect(() => {
        const fetchPublicPlaylists = async () => {
        try {
            const playlists: PlaylistData[] = await getAllPublicPlaylistsAPI();
            setPublicPlaylists(playlists);
            } catch (err) {
            console.error("L·ªói khi t·∫£i playlist c√¥ng khai:", err);
            }
        };

        fetchPublicPlaylists();
    }, []);


    return (
        <>
            <Sidebar onExpandChange={handleSidebarExpandChange} />
            <section className={`song_side ${sidebarExpanded ? "shrink" : ""}`}>

                {/* Hi·ªÉn th·ªã tr·∫°ng th√°i loading ho·∫∑c l·ªói */}
                {isLoading && <div>ƒêang t·∫£i...</div>}
                {error && <div style={{ color: 'red' }}>L·ªói: {error}</div>}

                {/* Ch·ªâ hi·ªÉn th·ªã n·ªôi dung khi kh√¥ng loading v√† kh√¥ng c√≥ l·ªói */}
                {!isLoading && !error && (
                    <>
                        {/* --- SECTION 1: RECOMMENDED --- */}         

                        <h1>Recommend For You</h1>
                        <div className="song-list">
                        {isLoadingTop ? (
                            <div>ƒêang t·∫£i top 10 b√†i h√°t ph·ªï bi·∫øn...</div>
                        ) : recommendedTracks.length > 0 ? (
                            recommendedTracks.map((song, index) => {
                            // console.log(`Song #${index + 1}:`);
                            // console.log("  Title:", song.title);
                            // console.log("  Artist:", song.artist);
                            // console.log("  Cover URL:", song.cover);
                            // console.log("  Audio src:", song.src);

                            return (
                                <button
                                key={`rec-${song.id}-${index}`}
                                className="song-item-section"
                                onClick={() => handleClicktest(song, recommendedTracks, index, 'queue', 'recommended')}
                                >
                                <div className="song-image-wrapper">
                                    <img src={song.cover || 'assets/anhmau.png'} alt={song.title} />
                                    <div
                                    className="play-button-section"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handlePlayButtonClick(recommendedTracks, index, 'queue', 'recommended');
                                    }}
                                    >
                                    <i
                                        className={
                                        currentPlayingId === song.id &&
                                        isPlaying &&
                                        currentContext?.type === 'queue' &&
                                        currentContext?.id === 'recommended'
                                            ? "fas fa-pause"
                                            : "fas fa-play"
                                        }
                                        style={{ color: "black" }}
                                    ></i>
                                    </div>
                                </div>
                                <p className="title" title={song.title}>{song.title || 'Unknown Title'}</p>
                                <p className="artist">{song.artist || 'Unknown Artist'}</p>
                                </button>
                            );
                            })
                        ) : (
                            <p>Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.</p>
                        )}
                        </div>

                       <h1>Popular Tracks</h1>
                        <div className="song-list">
                        {isLoadingTop ? (
                            <div>ƒêang t·∫£i top 10 b√†i h√°t ph·ªï bi·∫øn...</div>
                        ) : top10Tracks.length > 0 ? (
                            top10Tracks.map((song, index) => {
                            // console.log(`Song #${index + 1}:`);
                            // console.log("  Title:", song.title);
                            // console.log("  Artist:", song.artist);
                            // console.log("  Cover URL:", song.cover);
                            // console.log("  Audio src:", song.src);

                            return (
                                <button
                                key={`top-${song.id}-${index}`}
                                className="song-item-section"
                                onClick={() => handleClicktest(song, top10Tracks, index, 'queue', 'top10')}
                                >
                                <div className="song-image-wrapper">
                                    <img src={song.cover || 'assets/anhmau.png'} alt={song.title} />
                                    <div
                                    className="play-button-section"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handlePlayButtonClick(top10Tracks, index, 'queue', 'recommended');
                                    }}
                                    >
                                    <i
                                        className={
                                        currentPlayingId === song.id &&
                                        isPlaying &&
                                        currentContext?.type === 'queue' &&
                                        currentContext?.id === 'top10'
                                            ? "fas fa-pause"
                                            : "fas fa-play"
                                        }
                                        style={{ color: "black" }}
                                    ></i>
                                    </div>
                                </div>
                                <p className="title" title={song.title}>{song.title || 'Unknown Title'}</p>
                                <p className="artist">{song.artist || 'Unknown Artist'}</p>
                                </button>
                            );
                            })
                        ) : (
                            <p>Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.</p>
                        )}
                        </div>


                        {/* --- SECTION 2: RECENTLY RELEASED --- */}
                         {/* <h1>Recently released</h1>
                        <div className="song-list song-list-circle">
                            {recentTracks.length > 0 ? (
                                recentTracks.map((song, index) => (
                                     // Truy·ªÅn context type l√† 'queue' v√† id l√† 'recent' (v√≠ d·ª•)
                                    <button key={`rel-${song.id}-${index}`} className="song-item-section" onClick={() => handleClick(recentTracks, index, 'queue', 'recent')}>
                                        <img src={song.cover || 'assets/anhmau.png'} alt={song.title} />
                                    </button>
                                ))
                            ) : (
                                <p>Ch∆∞a c√≥ b√†i h√°t m·ªõi.</p>
                            )}
                        </div> */}

                        {/* --- SECTION 3: POPULAR --- */}
                        {/* <h1>Playlists</h1>
                        <div className="song-list">
                            {publicPlaylists.length > 0 ? (
                                publicPlaylists.map((playlist, index) => (
                                <button
                                    key={`playlist-${playlist.id}-${index}`}
                                    className="song-item-section"
                                    onClick={() => {
                                    // üëâ Chuy·ªÉn ƒë·∫øn trang hi·ªÉn th·ªã playlist chi ti·∫øt
                                        navigate(`/ManagerPlaylistLayout/${playlist.id}`)
                                    }}
                                >
                                    <img src={playlist.cover || 'assets/anhmau.png'} alt={playlist.title} />
                                    <p className="title" title={playlist.title}>{playlist.title}</p>
                                    <p className="artist">{playlist.artist}</p>
                                </button>
                                ))
                            ) : (
                                <p>Kh√¥ng c√≥ playlist c√¥ng khai n√†o.</p>
                            )}
                        </div> */}

                        {/* ------------------------- */}
                        {/* --- SECTION 4: Tracks --- */}
                        <h1>Recently Played</h1>
                        <div className="song-list">
                            {publicTracks.length > 0 ? (
                                publicTracks.map((song, index) => (
                                    // Truy·ªÅn context type l√† 'queue' v√† id l√† 'recommended' (v√≠ d·ª•)
                                        <button
                                            key={`rec-${song.id}-${index}`}
                                            className="song-item-section"
                                           onClick={() => handleClicktest(song, publicTracks, index, 'queue', 'tracks')}

                                            >
                                            <div className="song-image-wrapper">
                                                <img src={song.cover || 'assets/anhmau.png'} alt={song.title} />
                                                
                                                <div
                                                className="play-button-section"
                                                onClick={(e) => {
                                                    e.stopPropagation(); // NgƒÉn chuy·ªÉn trang
                                                    handlePlayButtonClick(publicTracks, index, 'queue', 'tracks');
                                                }}
                                                >
                                                <i
                                                    className={
                                                     currentPlayingId === song.id && isPlaying &&  currentContext?.type === 'queue' &&  currentContext?.id === 'tracks'
                                                        ? "fas fa-pause"
                                                        : "fas fa-play"
                                                    }
                                                    style={{ color: "black" }}
                                                ></i>
                                                </div>
                                            </div>

                                            <p className="title" title={song.title}>{song.title || 'Unknown Title'}</p>
                                            <p className="artist">{song.artist || 'Unknown Artist'}</p>
                                        </button>

                                ))
                            ) : (
                                <p>Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t.</p>
                            )}
                        </div>
                </>
                )}
            </section>
        </>
    );
};

export default Section;